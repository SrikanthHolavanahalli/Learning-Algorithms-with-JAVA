package arrays;

import java.util.Deque;
import java.util.LinkedList;

public class LargestRectangleinHistogram {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] input = {2,1,5,6,2,3};
		System.out.println(largestRectangleArea(input));
	}
	
	public static int largestRectangleArea(int[] hist) {
		// Create an empty stack. The stack holds indexes of hist[] array
	    // The bars stored in stack are always in increasing order of their
	    // heights.
	    Deque<Integer> s = new LinkedList<>();
	    int n = hist.length;
	    int max_area = 0; // Initalize max area
	    int tp;  // To store top of stack
	    int area_with_top; // To store area with top bar as the smallest bar
	 
	    // Run through all bars of given histogram
	    int i = 0;
	    while (i < n)
	    {
	        // If this bar is higher than the bar on top stack, push it to stack
	        if (s.isEmpty() || hist[s.peek()] <= hist[i]){
	            s.addFirst(i++);
	        }
	 
	        // If this bar is lower than top of stack, then calculate area of rectangle 
	        // with stack top as the smallest (or minimum height) bar. 'i' is 
	        // 'right index' for the top and element before top in stack is 'left index'
	        else
	        {
	            tp = s.peek();  // store the top index
	            s.poll();  // pop the top
	 
	            // Calculate the area with hist[tp] stack as smallest bar
	            area_with_top = hist[tp] * (s.isEmpty() ? i : i - s.peek() - 1);
	            System.out.println("area: "+area_with_top + " Min bar: " + hist[tp]+ " i: " + i+" s.peek(): " + s.peek() );
	            
	            // update max area, if needed
	            if (max_area < area_with_top)
	                max_area = area_with_top;
	        }
	    }
	 
	    // Now pop the remaining bars from stack and calculate area with every
	    // popped bar as the smallest bar
	    while (s.isEmpty() == false)
	    {
	        tp = s.peek();
	        s.poll();
	        System.out.println("Min bar: " + hist[tp]+ " i" + i+" s.peek()" + s.peek());
            
	        
	        area_with_top = hist[tp] * (s.isEmpty() ? i : i - s.peek() - 1);
	 
	        if (max_area < area_with_top)
	            max_area = area_with_top;
	    }
	 
	    return max_area;
		//return 0;
    }

}
